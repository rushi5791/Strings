Method 1 (Use Sorting)
1) Sort both strings
2) Compare the sorted strings


// C++ program to check whether two strings are 
// Permutations of each other 
#include <bits/stdc++.h> 
using namespace std; 

/* function to check whether two strings are 
Permutation of each other */
bool arePermutation(string str1, string str2) 
{ 
	// Get lenghts of both strings 
	int n1 = str1.length(); 
	int n2 = str2.length(); 

	// If length of both strings is not same, 
	// then they cannot be Permutation 
	if (n1 != n2) 
	return false; 

	// Sort both strings 
	sort(str1.begin(), str1.end()); 
	sort(str2.begin(), str2.end()); 

	// Compare sorted strings 
	for (int i = 0; i < n1; i++) 
	if (str1[i] != str2[i]) 
		return false; 

	return true; 
} 

/* Driver program to test to print printDups*/
int main() 
{ 
	string str1 = "test"; 
	string str2 = "ttew"; 
	if (arePermutation(str1, str2)) 
	printf("Yes"); 
	else
	printf("No"); 

	return 0; 
} 

O(n^2) in worst case. If we use a O(nLogn) sorting algorithm like merge sort, then the complexity becomes O(nLogn)


#######################################################################################


Method 2 (Count characters)
This method assumes that the set of possible characters in both strings is small. In the following implementation, it is assumed that the characters are stored using 8 bit and there can be 256 possible characters.
1) Create count arrays of size 256 for both strings. Initialize all values in count arrays as 0.
2) Iterate through every character of both strings and increment the count of character in the corresponding count arrays.
3) Compare count arrays. If both count arrays are same, then return true.



// C++ program to check whether two strings are 
// Permutations of each other 
#include <bits/stdc++.h> 
using namespace std; 
# define NO_OF_CHARS 256 

/* function to check whether two strings are 
Permutation of each other */
bool arePermutation(string str1, string str2) 
{ 
	// Create 2 count arrays and initialize 
	// all values as 0 
	int count1[NO_OF_CHARS] = {0}; 
	int count2[NO_OF_CHARS] = {0}; 
	int i; 

	// For each character in input strings, 
	// increment count in the corresponding 
	// count array 
	for (i = 0; str1[i] && str2[i]; i++) 
	{ 
		count1[str1[i]]++; 
		count2[str2[i]]++; 
	} 

	// If both strings are of different length. 
	// Removing this condition will make the 
	// program fail for strings like "aaca" 
	// and "aca" 
	if (str1[i] || str2[i]) 
	return false; 

	// Compare count arrays 
	for (i = 0; i < NO_OF_CHARS; i++) 
		if (count1[i] != count2[i]) 
			return false; 

	return true; 
} 

/* Driver program to test to print printDups*/
int main() 
{ 
	string str1 = "geeksforgeeks"; 
	string str2 = "forgeeksgeeks"; 
	if ( arePermutation(str1, str2) ) 
	printf("Yes"); 
	else
	printf("No"); 

	return 0; 
} 



##########################################################################################


// C++ function to check whether two strings are 
// Permutations of each other 
bool arePermutation(string str1, string str2) 
{ 
	// Create a count array and initialize all 
	// values as 0 
	int count[NO_OF_CHARS] = {0}; 
	int i; 

	// For each character in input strings, 
	// increment count in the corresponding 
	// count array 
	for (i = 0; str1[i] && str2[i]; i++) 
	{ 
		count[str1[i]]++; 
		count[str2[i]]--; 
	} 

	// If both strings are of different length. 
	// Removing this condition will make the 
	// program fail for strings like "aaca" and 
	// "aca" 
	if (str1[i] || str2[i]) 
	return false; 

	// See if there is any non-zero value in 
	// count array 
	for (i = 0; i < NO_OF_CHARS; i++) 
		if (count[i]) 
			return false; 
	return true; 
} 


o(n)
