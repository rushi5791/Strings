// C++ program to count all duplicates 
// from string using hashing 
#include <iostream> 
using namespace std; 
# define NO_OF_CHARS 256 

class gfg 
{ 
	public : 
	
	/* Fills count array with 
	frequency of characters */
	void fillCharCounts(char *str, int *count) 
	{ 
		int i; 
		for (i = 0; *(str + i); i++) 
		count[*(str + i)]++; 
	} 

	/* Print duplicates present 
	in the passed string */
	void printDups(char *str) 
	{ 
		
		// Create an array of size 256 and fill 
		// count of every character in it 
		int *count = (int *)calloc(NO_OF_CHARS, 
									sizeof(int)); 
		fillCharCounts(str, count); 

		// Print characters having count more than 0 
		int i; 
		for (i = 0; i < NO_OF_CHARS; i++) 
		if(count[i] > 1) 
			printf("%c, count = %d \n", i, count[i]); 

		free(count); 
	} 
}; 

/* Driver code*/
int main() 
{ 
	gfg g ; 
	char str[] = "test string"; 
	g.printDups(str); 
	//getchar(); 
	return 0; 
} 


######################################################

TWO LOOP APPROACH


#include <stdio.h>  
#include <string.h>  
   
int main()  
{  
    char string[] = "Great responsibility";  
    int count;  
      
    printf("Duplicate characters in a given string: \n");  
    //Counts each character present in the string  
    for(int i = 0; i < strlen(string); i++) {  
        count = 1;  
        for(int j = i+1; j < strlen(string); j++) {  
            if(string[i] == string[j] && string[i] != ' ') {  
                count++;  
                //Set string[j] to 0 to avoid printing visited character  
                string[j] = '0';  
            }  
        }  
        //A character is considered as duplicate if count is greater than 1  
        if(count > 1 && string[i] != '0')  
            printf("%c\n", string[i]);  
    }  
   
    return 0;  
    }
