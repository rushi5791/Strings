char by char matching 


// A C++ Program to find the longest common prefix 
#include<bits/stdc++.h> 
using namespace std; 

// A Function to find the string having the minimum 
// length and returns that length 
int findMinLength(string arr[], int n) 
{ 
	int min = arr[0].length(); 

	for (int i=1; i<n; i++) 
		if (arr[i].length() < min) 
			min = arr[i].length(); 

	return(min); 
} 

// A Function that returns the longest common prefix 
// from the array of strings 
string commonPrefix(string arr[], int n) 
{ 
	int minlen = findMinLength(arr, n); 

	string result; // Our resultant string 
	char current; // The current character 

	for (int i=0; i<minlen; i++) 
	{ 
		// Current character (must be same 
		// in all strings to be a part of 
		// result) 
		current = arr[0][i]; 

		for (int j=1 ; j<n; j++) 
			if (arr[j][i] != current) 
				return result; 

		// Append to result 
		result.push_back(current); 
	} 

	return (result); 
} 

// Driver program to test above function 
int main() 
{ 
	string arr[] = {"geeksforgeeks", "geeks", 
					"geek", "geezer"}; 
	int n = sizeof (arr) / sizeof (arr[0]); 

	string ans = commonPrefix (arr, n); 

	if (ans.length()) 
		cout << "The longest common prefix is "
			<< ans; 
	else
		cout << "There is no common prefix"; 
	return (0); 
} 


#################################################################

word by word matching


// A C++ Program to find the longest common prefix 
#include<bits/stdc++.h> 
using namespace std; 

// A Utility Function to find the common prefix between 
// strings- str1 and str2 
string commonPrefixUtil(string str1, string str2) 
{ 
	string result; 
	int n1 = str1.length(), n2 = str2.length(); 

	// Compare str1 and str2 
	for (int i=0, j=0; i<=n1-1&&j<=n2-1; i++,j++) 
	{ 
		if (str1[i] != str2[j]) 
			break; 
		result.push_back(str1[i]); 
	} 

	return (result); 
} 

// A Function that returns the longest common prefix 
// from the array of strings 
string commonPrefix (string arr[], int n) 
{ 
	string prefix = arr[0]; 

	for (int i=1; i<=n-1; i++) 
		prefix = commonPrefixUtil(prefix, arr[i]); 

	return (prefix); 
} 

// Driver program to test above function 
int main() 
{ 
	string arr[] = {"geeksforgeeks", "geeks", 
					"geek", "geezer"}; 
	int n = sizeof(arr) / sizeof(arr[0]); 

	string ans = commonPrefix(arr, n); 

	if (ans.length()) 
		printf ("The longest common prefix is - %s", 
				ans.c_str()); 
	else
		printf("There is no common prefix"); 

	return (0); 
} 


###################################################################

using binary search

// A C++ Program to find the longest common prefix 
#include<bits/stdc++.h> 
using namespace std; 

// A Function to find the string having the minimum 
// length and returns that length 
int findMinLength(string arr[], int n) 
{ 
	int min = INT_MAX; 

	for (int i=0; i<=n-1; i++) 
		if (arr[i].length() < min) 
			min = arr[i].length(); 
	return(min); 
} 

bool allContainsPrefix(string arr[], int n, string str, 
					int start, int end) 
{ 
	for (int i=0; i<=n-1; i++) 
		for (int j=start; j<=end; j++) 
			if (arr[i][j] != str[j]) 
				return (false); 
	return (true); 
} 

// A Function that returns the longest common prefix 
// from the array of strings 
string commonPrefix(string arr[], int n) 
{ 
	int index = findMinLength(arr, n); 
	string prefix; // Our resultant string 

	// We will do an in-place binary search on the 
	// first string of the array in the range 0 to 
	// index 
	int low = 0, high = index; 

	while (low <= high) 
	{ 
		// Same as (low + high)/2, but avoids overflow 
		// for large low and high 
		int mid = low + (high - low) / 2; 

		if (allContainsPrefix (arr, n, arr[0], low, mid)) 
		{ 
			// If all the strings in the input array contains 
			// this prefix then append this substring to 
			// our answer 
			prefix = prefix + arr[0].substr(low, mid-low+1); 

			// And then go for the right part 
			low = mid + 1; 
		} 

		else // Go for the left part 
			high = mid - 1; 
	} 

	return (prefix); 
} 

// Driver program to test above function 
int main() 
{ 
	string arr[] = {"geeksforgeeks", "geeks", 
					"geek", "geezer"}; 
	int n = sizeof (arr) / sizeof (arr[0]); 

	string ans = commonPrefix(arr, n); 

	if (ans.length()) 
		cout << "The longest common prefix is "
			<< ans; 
	else
		cout << "There is no common prefix"; 
	return (0); 
} 



###################################################################


using sorting

// C++ program to find longest common prefix 
// of given array of words. 
#include<iostream> 
#include<algorithm> 

using namespace std; 

// Function to find the longest common prefix 
string longestCommonPrefix(string ar[], int n) 
{ 

	// If size is 0, return empty string 
	if (n == 0) 
		return ""; 

	if (n == 1) 
		return ar[0]; 

	// Sort the given array 
	sort(ar, ar + n); 

	// Find the minimum length from 
	// first and last string 
	int en = min(ar[0].size(), 
				ar[n - 1].size()); 

	// Now the common prefix in first and 
	// last string is the longest common prefix 
	string first = ar[0], last = ar[n - 1]; 
	int i = 0; 
	while (i < en && first[i] == last[i]) 
		i++; 

	string pre = first.substr(0, i); 
	return pre; 
} 

// Driver Code 
int main() 
{ 
	string ar[] = {"geeksforgeeks", "geeks", 
						"geek", "geezer"}; 
	int n = sizeof(ar) / sizeof(ar[0]); 
	cout << "The longest common prefix is: "
		<< longestCommonPrefix(ar, n); 
	return 0; 
} 

