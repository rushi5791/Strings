// C/C++ program to find minimum number of 
// flip to make binary string alternate 
#include <bits/stdc++.h> 
using namespace std; 

// Utility method to flip a character 
char flip(char ch) 
{ 
	return (ch == '0') ? '1' : '0'; 
} 

// Utility method to get minimum flips when 
// alternate string starts with expected char 
int getFlipWithStartingCharcter(string str, 
								char expected) 
{ 
	int flipCount = 0; 
	for (int i = 0; i < str.length(); i++) 
	{ 
		// if current character is not expected, 
		// increase flip count 
		if (str[i] != expected) 
			flipCount++; 

		// flip expected character each time 
		expected = flip(expected); 
	} 
	return flipCount; 
} 

// method return minimum flip to make binary 
// string alternate 
int minFlipToMakeStringAlternate(string str) 
{ 
	// return minimum of following two 
	// 1) flips when alternate strign starts with 0 
	// 2) flips when alternate strign starts with 1 
	return min(getFlipWithStartingCharcter(str, '0'), 
			getFlipWithStartingCharcter(str, '1')); 
} 

// Driver code to test above method 
int main() 
{ 
	string str = "0001010111"; 
	cout << minFlipToMakeStringAlternate(str); 
	return 0; 
} 


###################################################################


// C++ implementation of the approach 
#include <bits/stdc++.h> 
using namespace std; 

// Function to return the minimum number of 
// characters of the given binary string 
// to be replaced to make the string alternating 
int minReplacement(string s, int len) 
{ 
	int ans = 0; 
	for (int i = 0; i < len; i++) { 

		// If there is 1 at even index positions 
		if (i % 2 == 0 && s[i] == '1') 
			ans++; 

		// If there is 0 at odd index positions 
		if (i % 2 == 1 && s[i] == '0') 
			ans++; 
	} 
	return min(ans, len - ans); 
} 

// Driver code 
int main() 
{ 
	string s = "1100"; 
	int len = s.size(); 
	cout << minReplacement(s, len); 

	return 0; 
} 
