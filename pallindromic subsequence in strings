// Counts Palindromic Subsequence in a given String
#include <cstring>
#include <iostream>
using namespace std;

// Function return the total palindromic subsequence
int countPS(string str)
{
	int N = str.length();

	// create a 2D array to store the count of palindromic
	// subsequence
	int cps[N + 1][N + 1];
	memset(cps, 0, sizeof(cps));

	// palindromic subsequence of length 1
	for (int i = 0; i < N; i++)
		cps[i][i] = 1;

	// check subsequence of length L is palindrome or not
	for (int L = 2; L <= N; L++) {
		for (int i = 0; i < N; i++) {
			int k = L + i - 1;
			if (str[i] == str[k])
				cps[i][k]
					= cps[i][k - 1] + cps[i + 1][k] + 1;
			else
				cps[i][k] = cps[i][k - 1] + cps[i + 1][k]
							- cps[i + 1][k - 1];
		}
	}

	// return total palindromic subsequence
	return cps[0][N - 1];
}

// Driver program
int main()
{
	string str = "abcb";
	cout << "Total palindromic subsequence are : "
		<< countPS(str) << endl;
	return 0;
}





#######################################################################################






using recursion



// C++ program to counts Palindromic Subsequence
// in a given String using recursion
#include <bits/stdc++.h>
using namespace std;

int n, dp[1000][1000];
string str = "abcb";

// Function return the total
// palindromic subsequence
int countPS(int i, int j)
{

	if (i > j)
		return 0;

	if (dp[i][j] != -1)
		return dp[i][j];

	if (i == j)
		return dp[i][j] = 1;

	else if (str[i] == str[j])
		return dp[i][j]
			= countPS(i + 1, j) + 
				countPS(i, j - 1) + 1;

	else
		return dp[i][j] = countPS(i + 1, j) +
						countPS(i, j - 1) -
						countPS(i + 1, j - 1);
}

// Driver code
int main()
{
	memset(dp, -1, sizeof(dp));
	n = str.size();
	cout << "Total palindromic subsequence are : "
		<< countPS(0, n - 1) << endl;
	return 0;
}
